// Project Shield Lite - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
let tasks = [];

function addTask() {
    const container = document.getElementById('tasks-container');
    const taskItem = document.createElement('div');
    taskItem.className = 'task-item';
    taskItem.innerHTML = `
        <input type="text" class="task-name" value="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏">
        <input type="number" class="task-duration" value="5" min="1" max="30" placeholder="–î–Ω–µ–π">
        <select class="task-risk">
            <option value="low">–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</option>
            <option value="medium" selected>–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫</option>
            <option value="high">–í—ã—Å–∫–∏–π —Ä–∏—Å–∫</option>
        </select>
        <button onclick="removeTask(this)" class="remove-btn">‚úï</button>
    `;
    container.appendChild(taskItem);
}

function removeTask(button) {
    button.parentElement.remove();
}

function runSimulation() {
    const statusEl = document.getElementById('status');
    statusEl.textContent = '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...';
    statusEl.className = 'status loading';
    statusEl.style.display = 'block';
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectName = document.getElementById('projectName').value || '–ú–æ–π –ø—Ä–æ–µ–∫—Ç';
    const taskElements = document.querySelectorAll('.task-item');
    
    tasks = [];
    taskElements.forEach(taskEl => {
        const name = taskEl.querySelector('.task-name').value || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const duration = parseInt(taskEl.querySelector('.task-duration').value) || 5;
        const risk = taskEl.querySelector('.task-risk').value;
        
        tasks.push({
            id: tasks.length + 1,
            name: name,
            duration: duration,
            risk: risk,
            start: tasks.length > 0 ? tasks[tasks.length - 1].end : 0,
            end: tasks.length > 0 ? tasks[tasks.length - 1].end + duration : duration
        });
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    if (tasks.length === 0) {
        tasks = [
            { id: 1, name: '–ó–∞–¥–∞—á–∞ 1', duration: 5, risk: 'medium', start: 0, end: 5 },
            { id: 2, name: '–ó–∞–¥–∞—á–∞ 2', duration: 7, risk: 'high', start: 5, end: 12 },
            { id: 3, name: '–ó–∞–¥–∞—á–∞ 3', duration: 4, risk: 'low', start: 12, end: 16 }
        ];
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ-–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
    setTimeout(() => {
        simulateProjectResilience();
        statusEl.textContent = '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!';
        statusEl.className = 'status success';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        document.getElementById('results').style.display = 'block';
        window.scrollTo(0, document.body.scrollHeight);
    }, 1200);
}

function simulateProjectResilience() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏
    const selectedRisks = [];
    if (document.getElementById('risk-supply').checked) selectedRisks.push('supply');
    if (document.getElementById('risk-staff').checked) selectedRisks.push('staff');
    if (document.getElementById('risk-tech').checked) selectedRisks.push('tech');
    if (document.getElementById('risk-market').checked) selectedRisks.push('market');
    if (document.getElementById('risk-weather').checked) selectedRisks.push('weather');
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const totalDuration = tasks[tasks.length - 1].end;
    let criticalTasks = 0;
    const riskFactors = {
        'low': 0.2,
        'medium': 0.5,
        'high': 0.8
    };
    
    // –ê–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ-–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
    let totalRiskImpact = 0;
    let highRiskTasks = 0;
    
    tasks.forEach(task => {
        const riskFactor = riskFactors[task.risk];
        const riskImpact = riskFactor * (selectedRisks.length / 5) * task.duration;
        totalRiskImpact += riskImpact;
        
        if (task.risk === 'high') highRiskTasks++;
        if (task.risk === 'high' && selectedRisks.length > 0) criticalTasks++;
    });
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const resilienceScore = Math.max(0, Math.min(100, 100 - (totalRiskImpact / totalDuration * 30)));
    const onTimeProbability = Math.max(0, Math.min(100, 100 - (totalRiskImpact / totalDuration * 40)));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('resilience-score').textContent = Math.round(resilienceScore) + '%';
    document.getElementById('resilience-bar').style.width = Math.round(resilienceScore) + '%';
    document.getElementById('resilience-bar').style.backgroundColor = 
        resilienceScore > 70 ? '#4caf50' : resilienceScore > 40 ? '#ff9800' : '#f44336';
    
    document.getElementById('on-time').textContent = Math.round(onTimeProbability) + '%';
    document.getElementById('critical-tasks').textContent = criticalTasks;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞
    renderGanttChart();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generateRecommendations(resilienceScore, criticalTasks, highRiskTasks);
}

function renderGanttChart() {
    const chartContainer = document.getElementById('gantt-chart');
    chartContainer.innerHTML = '';
    
    const totalDuration = tasks[tasks.length - 1].end;
    const chartWidth = chartContainer.clientWidth;
    
    // –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É –≤—Ä–µ–º–µ–Ω–∏
    const timeline = document.createElement('div');
    timeline.className = 'gantt-timeline';
    
    for (let i = 0; i <= totalDuration; i += Math.max(1, Math.floor(totalDuration / 10))) {
        const marker = document.createElement('div');
        marker.className = 'timeline-marker';
        marker.style.left = `${(i / totalDuration) * 100}%`;
        marker.innerHTML = `<span>${i}</span>`;
        timeline.appendChild(marker);
    }
    
    chartContainer.appendChild(timeline);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    tasks.forEach(task => {
        const taskEl = document.createElement('div');
        taskEl.className = `gantt-task task-risk-${task.risk}`;
        
        const startPercent = (task.start / totalDuration) * 100;
        const durationPercent = (task.duration / totalDuration) * 100;
        
        taskEl.style.left = `${startPercent}%`;
        taskEl.style.width = `${durationPercent}%`;
        
        taskEl.innerHTML = `
            <div class="task-label">${task.name}</div>
            <div class="task-duration">${task.duration} –¥–Ω</div>
        `;
        
        chartContainer.appendChild(taskEl);
    });
}

function generateRecommendations(resilienceScore, criticalTasks, highRiskTasks) {
    const list = document.getElementById('recommendations-list');
    list.innerHTML = '';
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    if (resilienceScore < 40) {
        list.innerHTML += `<li>‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 30-50% –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.</li>`;
        list.innerHTML += `<li>‚ö†Ô∏è –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Å –Ω–∏–∑–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞.</li>`;
    } else if (resilienceScore < 70) {
        list.innerHTML += `<li>‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏. –î–æ–±–∞–≤—å—Ç–µ –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ 15-25% –¥–ª—è –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º.</li>`;
        list.innerHTML += `<li>‚ö†Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è ${criticalTasks} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.</li>`;
    } else {
        list.innerHTML += `<li>‚úÖ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.</li>`;
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    if (criticalTasks > 0) {
        list.innerHTML += `<li>‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å ${criticalTasks} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ —É—è–∑–≤–∏–º—ã—Ö –∑–∞–¥–∞—á. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á.</li>`;
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–∏—Å–∫–∞–º
    if (document.getElementById('risk-supply').checked) {
        list.innerHTML += `<li>üí° –î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫: –∏—â–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</li>`;
    }
    
    if (document.getElementById('risk-staff').checked) {
        list.innerHTML += `<li>üí° –î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤: –≤–Ω–µ–¥—Ä–∏—Ç–µ –∫—Ä–æ—Å—Å-–æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è ${Math.min(2, highRiskTasks)} –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á.</li>`;
    }
    
    if (document.getElementById('risk-tech').checked) {
        list.innerHTML += `<li>üí° –î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤: –ø—Ä–æ–≤–µ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–∏–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.</li>`;
    }
    
    // –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    list.innerHTML += `<li>üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ (—Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.</li>`;
}

function generatePDF() {
    alert('–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF.\n\n–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF –¥–æ–±–∞–≤—å—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É jsPDF –≤ –ø—Ä–æ–µ–∫—Ç.');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (document.querySelectorAll('.task-item').length === 0) {
        addTask();
    }
});
